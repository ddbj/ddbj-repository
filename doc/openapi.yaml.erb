<%- require 'yaml' -%>
<%- dbs = YAML.load_file(File.expand_path('../../config/db.yml', __FILE__), symbolize_names: true) -%>
openapi: 3.1.0

info:
  title: DDBJ Repository API
  version: 1.0.0

servers:
  - url: https://repository.ddbj.nig.ac.jp/api
  - url: https://repository-staging.ddbj.nig.ac.jp/api
  - url: https://repository-dev.ddbj.nig.ac.jp/api

security:
  - BearerAuth: []

paths:
  <%- dbs.each do |db| -%>
  /validations/<%= db[:id].downcase %>/via-file:
    post:
      tags:
        - Validation

      requestBody:
        $ref: '#/components/requestBodies/<%= db[:id] %>ViaFile'

      responses:
        '201':
          $ref: '#/components/responses/CreateResponseCreated'

        '400':
          $ref: '#/components/responses/CreateResponseBadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /submissions/<%= db[:id].downcase %>/via-file:
    post:
      tags:
        - Submission

      requestBody:
        $ref: '#/components/requestBodies/<%= db[:id] %>ViaFile'

      responses:
        '201':
          $ref: '#/components/responses/CreateResponseCreated'

        '400':
          $ref: '#/components/responses/CreateResponseBadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

  <%- end -%>
  /requests/{id}:
    get:
      tags:
        - Request

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

          example: 42

      responses:
        '200':
          description: Return the request resource.

          content:
            application/json:
              schema:
                type: object

                properties:
                  status:
                    type: string

                    enum:
                      - waiting
                      - processing
                      - finished

                  validity:
                    type:
                      - string
                      - 'null'

                    enum:
                      - valid
                      - invalid
                      - error
                      - null

                  validation_reports:
                    type: object

                    properties:
                      _base:
                        $ref: '#/components/schemas/ValidationReport'

                      <%- dbs.flat_map { _1[:objects] }.uniq { _1[:id] }.each do |obj| -%>
                      <%= obj[:id] %>:
                        $ref: '#/components/schemas/ValidationReport'

                      <%- end -%>
                    required:
                      - _base

                  submission:
                    type:
                      - object
                      - 'null'

                    properties:
                      id:
                        type: string

                    required:
                      - id

                required:
                  - status
                  - validity
                  - validation_reports
                  - submission

              example:
                status: finished
                validity: valid

                validation_reports:
                  - object_id: _base
                    path: null
                    validity: null
                    details: null

                  - object_id: BioSample
                    path: mybiosample.xml
                    validity: valid

                    details:
                      validity: true
                      answer: 42

                submission:
                  id: X-84

        '401':
          $ref: '#/components/responses/Unauthorized'

  /me:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object

                properties:
                  uid:
                    type: string

                required:
                  - uid

              example:
                uid: alice

        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    ValidationReport:
      type: object

      properties:
        object_id:
          type: string

          enum:
            - _base
            <%- dbs.flat_map { _1[:objects] }.uniq { _1[:id] }.each do |obj| -%>
            - <%= obj[:id] %>
            <%- end -%>

        path:
          type:
            - string
            - 'null'

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        details:
          type:
            - object
            - 'null'

      required:
        - object_id
        - path
        - validity
        - details

    <%- dbs.each do |db| -%>
    <%= db[:id] %>ViaFileJSON:
      type: object

      properties:
        <%- db[:objects].each do |obj| -%>
        <%= obj[:id] %>:
          <%- if obj[:multiple] -%>
          type: array
          minItems: <%= obj[:optional] ? 0 : 1 %>

          items:
            type: object

            properties:
              path:
                $ref: '#/components/schemas/UserHomePath'

              destination:
                type: string

            required:
              - path
          <%- else -%>
          type: object

          properties:
            path:
              $ref: '#/components/schemas/UserHomePath'

            destination:
              type: string

          required:
            - path
          <%- end -%>

        <%- end -%>
      required:
        <%- db[:objects].reject { _1[:optional] }.each do |obj| -%>
        - <%= obj[:id] %>
        <%- end -%>

    <%- db[:objects].each do |obj| -%>
    <%= db[:id] %>ViaFileFormData<%= obj[:id] %>:
      allOf:
        - oneOf:
          - type: object

            properties:
              <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[file]:
                <%- if obj[:multiple] -%>
                type: array
                minItems: <%= obj[:optional] ? 0 : 1 %>

                items:
                  type: string
                  format: binary
                <%- else -%>
                type: string
                format: binary
                <%- end -%>

            <%- unless obj[:optional] -%>
            required:
              - <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[file]

            <%- end -%>
          - type: object

            properties:
              <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[path]:
                <%- if obj[:multiple] -%>
                type: array
                minItems: <%= obj[:optional] ? 0 : 1 %>

                items:
                  $ref: '#/components/schemas/UserHomePath'
                <%- else -%>
                $ref: '#/components/schemas/UserHomePath'
                <%- end -%>

            <%- unless obj[:optional] -%>
            required:
              - <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[path]

            <%- end -%>
        - type: object

          properties:
            <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[destination]:
              <%- if obj[:multiple] -%>
              type: array
              minItems: <%= obj[:optional] ? 0 : 1 %>

              items:
                type: string
              <%- else -%>
              type: string
              <%- end -%>

    <%- end -%>
    <%- end -%>
    UserHomePath:
      type: string
      description: Relative path from the user's home directory.

  requestBodies:
    <%- dbs.each do |db| -%>
    <%= db[:id] %>ViaFile:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/<%= db[:id] %>ViaFileJSON'

          example:
            <%- db[:objects].each do |obj| -%>
            <%= obj[:id] %>:
              path: my<%= obj[:id].downcase %>.<%= obj[:ext] %>
              destination: path/to/destination
            <%- end -%>

        multipart/form-data:
          schema:
            allOf:
              <%- db[:objects].each do |obj| -%>
              - $ref: '#/components/schemas/<%= db[:id] %>ViaFileFormData<%= obj[:id] %>'
              <%- end -%>

    <%- end -%>
  responses:
    CreateResponseCreated:
      description: The requested process initiated successfully.

      content:
        application/json:
          schema:
            type: object

            properties:
              request:
                type: object

                properties:
                  id:
                    type: integer

                  url:
                    type: string
                    format: uri

                required:
                  - id
                  - url

            required:
              - request

          example:
            request:
              id: 42
              url: http://www.example.com/api/requests/42

    CreateResponseBadRequest:
      description: The requested process could not be initiated.

      content:
        application/json:
          schema:
            type: object

            properties:
              error:
                type: string

            required:
              - error

          example:
            error: path must be in /home/alice

    Unauthorized:
      description: Not authenticated.

      content:
        application/json:
          schema:
            type: object

            properties:
              error:
                type: string

            required:
              - error

          example:
            error: Unauthorized
