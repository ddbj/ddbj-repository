openapi: 3.1.0

info:
  title: DDBJ Repository API
  version: 1.0.0

servers:
  - url: https://repository.ddbj.nig.ac.jp/api
  - url: https://repository-staging.ddbj.nig.ac.jp/api
  - url: https://repository-dev.ddbj.nig.ac.jp/api

security:
  - BearerAuth: []

paths:
  /api-key:
    get:
      description: Get login URL.

      tags:
        - Authentication

      security: []

      responses:
        '200':
          description: Returns the login URL. Open this URL in your browser.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [login_url]

                properties:
                  login_url:
                    type: string
                    format: uri

              example:
                login_url: https://repository.ddbj.nig.ac.jp/auth/login

  /api-key/regenerate:
    post:
      description: Re-generate API key.

      tags:
        - Authentication

      responses:
        '200':
          description: Returns a new API key.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [api_key]

                properties:
                  api_key:
                    type: string

              example:
                api_key: ddbj_repository_VbHQePhpFhvrKI7by1kteMvN2ImLfhGVK4mTPFEZ2EO

        '401':
          $ref: '#/components/responses/Unauthorized'

  /me:
    get:
      description: Get your login ID.

      tags:
        - Authentication

      responses:
        '200':
          description: Returns the user's login ID.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [uid]

                properties:
                  uid:
                    type: string

              example:
                uid: alice

        '401':
          $ref: '#/components/responses/Unauthorized'

  /validations/via-file:
    post:
      description: Validate submission files.

      tags:
        - Validation

      requestBody:
        $ref: '#/components/requestBodies/ViaFile'

      responses:
        '201':
          description: The validation process initiated successfully.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validation'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /validations:
    get:
      description: Get your validations.

      tags:
        - Validation

      parameters:
        - in: query
          name: page

          schema:
            type: integer

      responses:
        '200':
          description: Return your validations.

          headers:
            Link:
              schema:
                type: string

              description: GitHub-style pagination URLs. See [Using pagination in the REST API - GitHub Docs](https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28) for details.

          content:
            application/json:
              schema:
                type: array

                items:
                  $ref: '#/components/schemas/Validation'

              example:
                - id: 100
                  url: https://repository.ddbj.nig.ac.jp/api/validations/100
                  db: BioProject
                  created_at: '2024-01-01T00:00:00.000Z'
                  started_at: '2024-01-01T00:01:00.000Z'
                  finished_at: '2024-01-01T00:02:00.000Z'
                  progress: finished
                  validity: valid

                  objects:
                    - id: BioProject
                      files:
                        - path: mybioproject.xml
                          url: https://repository.ddbj.nig.ac.jp/api/validations/100/files/mybioproject.xml

                  results:
                    - object_id: _base
                      validity: valid
                      details: null
                      file: null

                    - object_id: BioSample
                      validity: valid

                      details:
                        validity: true
                        answer: 42

                      file:
                        path: mybiosample.xml
                        url: https://repository.ddbj.nig.ac.jp/api/validations/100/files/mybioproject.xml

                  submission:
                    id: X-200
                    url: https://repository.ddbj.nig.ac.jp/api/submissions/X-200

                - id: 101
                  url: https://repository.ddbj.nig.ac.jp/api/validations/101
                  db: BioSample
                  created_at: '2024-01-01T01:00:00.000Z'
                  started_at: '2024-01-01T01:01:00.000Z'
                  finished_at: '2024-01-01T01:02:00.000Z'
                  progress: waiting
                  validity: null

                  objects:
                    - id: BioSample
                      files:
                        - path: mybiosample.xml
                          url: https://repository.ddbj.nig.ac.jp/api/validations/101/files/mybiosample.xml

                  results:
                    - object_id: _base
                      validity: null
                      details: null
                      file: null

                  submission: null

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /validations/{id}:
    get:
      description: Get the validation.

      tags:
        - Validation

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

          example: 42

      responses:
        '200':
          description: Return the validation.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validation'

              example:
                id: 42
                url: https://repository.ddbj.nig.ac.jp/api/validations/42
                progress: finished
                validity: valid

                results:
                  - object_id: _base
                    validity: null
                    details: null
                    file: null

                  - object_id: BioSample
                    path: mybiosample.xml
                    validity: valid

                    details:
                      validity: true
                      answer: 42

                    file:
                      path: mybiosample.xml
                      url: https://repository.ddbj.nig.ac.jp/api/validations/42/files/mybioproject.xml

                submission:
                  id: X-84
                  url: https://repository.ddbj.nig.ac.jp/api/submissions/X-84

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      description: Cancel the validation.

      tags:
        - Validation

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

          example: 42

      responses:
        '200':
          description: Validation canceled successfully.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [message]

                properties:
                  message:
                    type: string

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /validations/{id}/files/{path}:
    get:
      description: Get the submission file content.

      tags:
        - Validation

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

        - name: path
          in: path
          required: true
          style: matrix
          explode: true

          schema:
            type: string

          example: dest/mybiosample.xml

      responses:
        '302':
          description: Redirect to the file.

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

  /submissions:
    get:
      description: Get your submissions.

      tags:
        - Submission

      parameters:
        - in: query
          name: page

          schema:
            type: integer

      responses:
        '200':
          description: Return your submissions.

          headers:
            Link:
              schema:
                type: string

              description: The GitHub-style pagination URLs. See [Using pagination in the REST API - GitHub Docs](https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28) for details.

          content:
            application/json:
              schema:
                type: array

                items:
                  $ref: '#/components/schemas/Submission'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

    post:
      description: Submit the validation.

      tags:
        - Submission

      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [validation_id]

              properties:
                validation_id:
                  type: integer

      responses:
        '201':
          description: Submitted successfully.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /submissions/{id}:
    get:
      description: Get the submission.

      tags:
        - Submission

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: string

          example: X-42

      responses:
        '200':
          description: Return the submission.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Validation:
      type: object
      additionalProperties: false
      required: [id, url, db, created_at, started_at, finished_at, progress, validity, objects, results, submission]

      properties:
        id:
          type: integer

        url:
          type: string
          format: uri

        db:
          type: string

          enum:
            <%- dbs.each do |db| -%>
            - <%= db[:id] %>
            <%- end -%>

        created_at:
          type: string
          format: date-time

        started_at:
          type:
            - string
            - 'null'

          format: date-time

        finished_at:
          type:
            - string
            - 'null'

          format: date-time

        progress:
          type: string

          enum:
            - waiting
            - running
            - finished
            - canceled

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        objects:
          $ref: '#/components/schemas/Objects'

        results:
          type: array

          items:
            $ref: '#/components/schemas/ValidationResult'

        submission:
          type:
            - object
            - 'null'

          required: [id, url]

          properties:
            id:
              type: string

            url:
              type: string
              format: uri

    Submission:
      type: object
      additionalProperties: false
      required: [id, created_at, validation]

      properties:
        id:
          type: string

        created_at:
          type: string
          format: date-time

        validation:
          $ref: '#/components/schemas/Validation'

    Objects:
      type: array

      items:
        type: object
        additionalProperties: false
        required: [id, files]

        properties:
          id:
            type: string

            enum:
              <%- dbs.flat_map { _1[:objects] }.map { _1[:id] }.uniq.each do |obj_id| -%>
              - <%= obj_id %>
              <%- end -%>

          files:
            type: array

            items:
              type: object
              additionalProperties: false
              required: [path, url]

              properties:
                path:
                  type: string

                url:
                  type: string
                  format: uri

    ValidationResult:
      type: object
      additionalProperties: false
      required: [object_id, validity, details, file]

      properties:
        object_id:
          type: string

          enum:
            - _base
            <%- dbs.flat_map { _1[:objects] }.uniq { _1[:id] }.each do |obj| -%>
            - <%= obj[:id] %>
            <%- end -%>

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        details:
          type:
            - object
            - 'null'

        file:
          type:
            - object
            - 'null'

          additionalProperties: false
          required: [path, url]

          properties:
            path:
              type: string

            url:
              type: string
              format: uri

    File:
      type: string
      format: binary

    Path:
      type: string
      description: |
        Path of the file on the NIG supercomputer, relative to the home directory of the authorised user.

        Note: If both file and path are specified, the file takes precedence.

    Destination:
      type: string
      description: Destination of the file to be submitted.

    Error:
      type: object
      additionalProperties: false
      required: [error]

      properties:
        error:
          type: string

    <%- dbs.each do |db| -%>
    <%= db[:id] %>ViaFile:
      type: object
      additionalProperties: false

      allOf:
        <%- db[:objects].each do |obj| -%>
        <%- unless obj[:optional] -%>
        - oneOf:
          - required:
            - <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[file]
          - required:
            - <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[path]
        <%- end -%>
        <%- end -%>

      properties:
        db:
          type: string
          enum: [<%= db[:id] %>]

        <%- db[:objects].each do |obj| -%>
        <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[file]:
          <%- if obj[:multiple] -%>
          type: array
          minItems: <%= obj[:optional] ? 0 : 1 %>

          items:
            $ref: '#/components/schemas/File'
          <%- else -%>
          $ref: '#/components/schemas/File'
          <%- end -%>

        <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[path]:
          <%- if obj[:multiple] -%>
          type: array
          minItems: <%= obj[:optional] ? 0 : 1 %>

          items:
            $ref: '#/components/schemas/Path'
          <%- else -%>
          $ref: '#/components/schemas/Path'
          <%- end -%>

        <%= obj[:id] %><% if obj[:multiple] %>[]<% end %>[destination]:
          <%- if obj[:multiple] -%>
          type: array
          minItems: <%= obj[:optional] ? 0 : 1 %>

          items:
            $ref: '#/components/schemas/Destination'
          <%- else -%>
          $ref: '#/components/schemas/Destination'
          <%- end -%>

        <%- end -%>
      <%- end -%>
  requestBodies:
    ViaFile:
      content:
        multipart/form-data:
          schema:
            oneOf:
              <%- dbs.each do |db| -%>
              - $ref: '#/components/schemas/<%= db[:id] %>ViaFile'
              <%- end -%>

            discriminator:
              propertyName: db

              mapping:
                <%- dbs.each do |db| -%>
                <%= db[:id] %>: '#/components/schemas/<%= db[:id] %>ViaFile'
                <%- end -%>

  responses:
    BadRequest:
      description: Unexpected parameter specified.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: expected :page in 1..3; got 4

    Unauthorized:
      description: Not authenticated.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: Unauthorized

    NotFound:
      description: The requested resource could not be found.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: Not Found

    UnprocessableEntity:
      description: Invalid parameter or payload was specified.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

          example:
            error: 'Validation failed: Path is duplicated: mybiosample.xml'
