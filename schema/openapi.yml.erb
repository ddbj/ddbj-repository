openapi: 3.1.0

info:
  title: DDBJ Repository API
  version: 1.0.0

servers:
  - url: https://repository.ddbj.nig.ac.jp/api
  - url: https://repository-staging.ddbj.nig.ac.jp/api
  - url: https://repository-dev.ddbj.nig.ac.jp/api

security:
  - BearerAuth: []

paths:
  /api_key/regenerate:
    post:
      description: Re-generate API key.

      tags:
        - Authentication

      responses:
        '200':
          description: Returns a new API key.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [api_key]

                properties:
                  api_key:
                    type: string

        '401':
          $ref: '#/components/responses/Unauthorized'

  /me:
    get:
      description: Get your information.

      tags:
        - Authentication

      responses:
        '200':
          description: Returns the user.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [uid, api_key, admin]

                properties:
                  uid:
                    type: string

                  api_key:
                    type: string

                  admin:
                    type: boolean

        '401':
          $ref: '#/components/responses/Unauthorized'

  /validations:
    get:
      description: Get your validations.

      tags:
        - Validation

      parameters:
        - in: query
          name: page

          description: |
            The page number to return. The default is 1.

          schema:
            type: integer
            default: 1

        - in: query
          name: everyone

          description: |
            If true, return all validations. If false, return only your validations.
            (Administrator only)

          schema:
            type: boolean
            default: false

        - in: query
          name: uid
          style: form
          explode: false

          description: |
            Return validations of the specified users.
            (Administrator only)

          schema:
            type: array

            items:
              type: string

        - in: query
          name: db
          style: form
          explode: false

          description: |
            Return validations of the specified databases.

          schema:
            type: array

            items:
              type: string

              enum:
                <%- dbs.each do |db| -%>
                - <%= db[:id] %>
                <%- end -%>

        - in: query
          name: created_at_after

          schema:
            type: string
            format: date-time

        - in: query
          name: created_at_before

          schema:
            type: string
            format: date-time

        - in: query
          name: progress
          style: form
          explode: false

          schema:
            type: array

            items:
              type: string

              enum:
                - waiting
                - running
                - finished
                - canceled

        - in: query
          name: validity
          style: form
          explode: false

          schema:
            type: array

            items:
              type: string

              enum:
                - valid
                - invalid
                - error
                - 'null'

        - in: query
          name: submitted

          schema:
            type: boolean

      responses:
        '200':
          description: Return your validations.

          headers:
            Link:
              schema:
                type: string

              description: GitHub-style pagination URLs. See [Using pagination in the REST API - GitHub Docs](https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28) for details.

          content:
            application/json:
              schema:
                type: array

                items:
                  $ref: '#/components/schemas/ValidationWithSubmission'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

  /validations/via_file:
    post:
      description: Validate submission files.

      tags:
        - Validation

      requestBody:
        $ref: '#/components/requestBodies/ViaFile'

      responses:
        '201':
          description: The validation process initiated successfully.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationWithSubmission'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableContent'

  /validations/via_ddbj_record:
    post:
      description: Validate DDBJRecord.

      tags:
        - Validation

      requestBody:
        $ref: '#/components/requestBodies/ViaDDBJRecord'

      responses:
        '201':
          description: The validation process initiated successfully.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationWithSubmission'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableContent'

  /validations/{id}:
    get:
      description: Get the validation.

      tags:
        - Validation

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

      responses:
        '200':
          description: Return the validation.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationWithSubmission'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      description: Cancel the validation.

      tags:
        - Validation

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

      responses:
        '200':
          description: Validation canceled successfully.

          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required: [message]

                properties:
                  message:
                    type: string

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

        '422':
          $ref: '#/components/responses/UnprocessableContent'

  /validations/{id}/files/{path}:
    get:
      description: Get the submission file content.

      tags:
        - Validation

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: integer

        - name: path
          in: path
          required: true
          style: matrix
          explode: true

          schema:
            type: string

      responses:
        '302':
          description: Redirect to the file.

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

  /submissions:
    get:
      description: Get your submissions.

      tags:
        - Submission

      parameters:
        - in: query
          name: page

          schema:
            type: integer

        - in: query
          name: db
          style: form
          explode: false

          description: |
            Return submissions of the specified databases.

          schema:
            type: array

            items:
              type: string

              enum:
                <%- dbs.each do |db| -%>
                - <%= db[:id] %>
                <%- end -%>

        - in: query
          name: created_at_after

          schema:
            type: string
            format: date-time

        - in: query
          name: created_at_before

          schema:
            type: string
            format: date-time

        - in: query
          name: result
          style: form
          explode: false

          schema:
            type: array

            items:
              type: string

              enum:
                - success
                - failure
                - error
                - 'null'

      responses:
        '200':
          description: Return your submissions.

          headers:
            Link:
              schema:
                type: string

              description: The GitHub-style pagination URLs. See [Using pagination in the REST API - GitHub Docs](https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28) for details.

          content:
            application/json:
              schema:
                type: array

                items:
                  $ref: '#/components/schemas/SubmissionWithValidation'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

    post:
      description: Submit the validation.

      tags:
        - Submission

      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                <%- dbs.each do |db| -%>
                - $ref: '#/components/schemas/SubmissionRequest<%= db[:id] %>'
                <%- end -%>

      responses:
        '201':
          description: Submitted successfully.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionWithValidation'

        '400':
          $ref: '#/components/responses/BadRequest'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '422':
          $ref: '#/components/responses/UnprocessableContent'

  /submissions/{id}:
    get:
      description: Get the submission.

      tags:
        - Submission

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: string

      responses:
        '200':
          description: Return the submission.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionWithValidation'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

  /accessions/{id}:
    get:
      description: Get the accession.

      tags:
        - Accession

      parameters:
        - name: id
          in: path
          required: true

          schema:
            type: string

      responses:
        '200':
          description: Return the accession.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accession'

        '401':
          $ref: '#/components/responses/Unauthorized'

        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    ValidationWithSubmission:
      allOf:
        - oneOf:
            <%- dbs.each do |db| -%>
            - $ref: '#/components/schemas/<%= db[:id] %>Validation'
            <%- end -%>

        - type: object

          required:
            - submission

          properties:
            submission:
              oneOf:
                - $ref: '#/components/schemas/Submission'
                - type: 'null'

      unevaluatedProperties: false

    Validation:
      oneOf:
        <%- dbs.each do |db| -%>
        - $ref: '#/components/schemas/<%= db[:id] %>Validation'
        <%- end -%>

    <%- dbs.each do |db| -%>
    <%= db[:id] %>Validation:
      type: object

      required:
        - id
        - url
        - user
        - db
        - created_at
        - started_at
        - finished_at
        - progress
        - validity
        - objects
        - results

      properties:
        id:
          type: integer

        url:
          type: string
          format: uri

        user:
          type: object
          additionalProperties: false
          required: [uid]

          properties:
            uid:
              type: string

        db:
          const: <%= db[:id] %>

        created_at:
          type: string
          format: date-time

        started_at:
          type:
            - string
            - 'null'

          format: date-time

        finished_at:
          type:
            - string
            - 'null'

          format: date-time

        progress:
          type: string

          enum:
            - waiting
            - running
            - finished
            - canceled

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        objects:
          $ref: '#/components/schemas/Objects'

        results:
          type: array

          items:
            $ref: '#/components/schemas/ValidationResult'

        raw_result:
          type:
            - object
            - 'null'

    <%- end -%>
    <%- dbs.each do |db| -%>
    SubmissionRequest<%= db[:id] %>:
      type: object
      additionalProperties: false

      required:
        - db
        - validation_id
        - visibility
        <%- if db[:id] == 'BioProject' -%>
        - umbrella
        <%- end -%>

      properties:
        db:
          const: <%= db[:id] %>

        validation_id:
          type: integer

        visibility:
          type: string

          enum:
            - public
            - private
        <%- if db[:id] == 'BioProject' -%>

        umbrella:
          type: boolean
        <%- end -%>

    <%- end -%>
    SubmissionWithValidation:
      allOf:
        - $ref: '#/components/schemas/Submission'

        - type: object

          required:
            - validation

          properties:
            validation:
              $ref: '#/components/schemas/Validation'

      unevaluatedProperties: false

    Submission:
      oneOf:
        <%- dbs.each do |db| -%>
        - $ref: '#/components/schemas/<%= db[:id] %>Submission'
        <%- end -%>

    <%- dbs.each do |db| -%>
    <%= db[:id] %>Submission:
      type: object

      required:
        - id
        - url
        - db
        - created_at
        - started_at
        - finished_at
        - progress
        - result
        - error_message
        - visibility
        - accessions
        <%- if db[:id] == 'BioProject' -%>
        - umbrella
        <%- end -%>

      properties:
        id:
          type: integer

        url:
          type: string
          format: uri

        db:
          const: <%= db[:id] %>

        created_at:
          type: string
          format: date-time

        started_at:
          type:
            - string
            - 'null'

          format: date-time

        finished_at:
          type:
            - string
            - 'null'

          format: date-time

        progress:
          type: string

          enum:
            - waiting
            - running
            - finished
            - canceled

        result:
          type:
            - string
            - 'null'

          enum:
            - success
            - failure
            - null

        error_message:
          type:
            - string
            - 'null'

        visibility:
          type: string

          enum:
            - public
            - private

        accessions:
          type: array

          items:
            type: object
            additionalProperties: false

            required:
              - number
              - entry_id
              - version
              - last_updated_at

            properties:
              number:
                type: string

              entry_id:
                type: string

              version:
                type: integer

              last_updated_at:
                type: string
                format: date-time
        <%- if db[:id] == 'BioProject' -%>

        umbrella:
          type: boolean
        <%- end -%>

    <%- end -%>
    Objects:
      type: array

      items:
        type: object
        additionalProperties: false
        required: [id, files]

        properties:
          id:
            type: string

            enum:
              <%- dbs.flat_map { _1[:objects].values.flatten }.map { _1[:id] }.uniq.each do |obj_id| -%>
              - <%= obj_id %>
              <%- end -%>

          files:
            type: array

            items:
              type: object
              additionalProperties: false
              required: [path, url]

              properties:
                path:
                  type: string

                url:
                  type: string
                  format: uri

    Accession:
      type: object
      additionalProperties: false
      required: [number, entry_id, version, last_updated_at]

      properties:
        number:
          type: string

        entry_id:
          type: string

        version:
          type: integer

        last_updated_at:
          type: string
          format: date-time

    ValidationResult:
      type: object
      additionalProperties: false
      required: [object_id, validity, details, file]

      properties:
        object_id:
          type: string

          enum:
            - _base
            <%- dbs.flat_map { _1[:objects].values.flatten }.uniq { _1[:id] }.each do |obj| -%>
            - <%= obj[:id] %>
            <%- end -%>

        validity:
          type:
            - string
            - 'null'

          enum:
            - valid
            - invalid
            - error
            - null

        details:
          type: array

          items:
            type: object
            additionalProperties: false
            required: [code, severity, message]

            properties:
              code:
                type:
                  - string
                  - 'null'

              severity:
                type:
                  - string
                  - 'null'

              message:
                type:
                  - string
                  - 'null'

        file:
          type:
            - object
            - 'null'

          additionalProperties: false
          required: [path, url]

          properties:
            path:
              type: string

            url:
              type: string
              format: uri

    File:
      type: string
      format: binary

    Path:
      type: string
      description: |
        Path of the file on the NIG supercomputer, relative to the home directory of the authorised user.

        Note: If both file and path are specified, the file takes precedence.

    Destination:
      type: string
      description: Destination of the file to be submitted.

    Error:
      type: object
      additionalProperties: false
      required: [error]

      properties:
        error:
          type: string

    <%- dbs.each do |db| -%>
    <%= db[:id] %>ViaFile:
      type: object
      additionalProperties: false

      required:
        - db
        <%- db[:objects][:file].select { _1[:required] }.each do |obj| -%>
        - <%= obj[:id] %>
        <%- end -%>

      properties:
        db:
          const: <%= db[:id] %>

        <%- db[:objects][:file].each do |obj| -%>
        <%= obj[:id] %>:
          <%- if obj[:multiple] -%>
          type: array
          minItems: <%= obj[:required] ? 1 : 0 %>

          items:
            type: object
            additionalProperties: false

            oneOf:
              - required: [file]
              - required: [path]

            properties:
              file:
                $ref: '#/components/schemas/File'

              path:
                $ref: '#/components/schemas/Path'

              destination:
                $ref: '#/components/schemas/Destination'
          <%- else -%>
          type: object
          additionalProperties: false

          oneOf:
            - required: [file]
            - required: [path]

          properties:
            file:
              $ref: '#/components/schemas/File'

            path:
              $ref: '#/components/schemas/Path'

            destination:
              $ref: '#/components/schemas/Destination'
          <%- end -%>

        <%- end -%>
      <%- end -%>

    <%- dbs.reject { it[:objects][:ddbj_record].empty? }.each do |db| -%>
    <%= db[:id] %>ViaDDBJRecord:
      type: object
      additionalProperties: false

      required:
        - db
        <%- db[:objects][:ddbj_record]&.select { _1[:required] }.each do |obj| -%>
        - <%= obj[:id] %>
        <%- end -%>

      properties:
        db:
          const: <%= db[:id] %>

        <%- db[:objects][:ddbj_record].each do |obj| -%>
        <%= obj[:id] %>:
          <%- if obj[:multiple] -%>
          type: array
          minItems: <%= obj[:required] ? 1 : 0 %>

          items:
            type: object
            additionalProperties: false

            oneOf:
              - required: [file]
              - required: [path]

            properties:
              file:
                $ref: '#/components/schemas/File'

              path:
                $ref: '#/components/schemas/Path'

              destination:
                $ref: '#/components/schemas/Destination'
          <%- else -%>
          type: object
          additionalProperties: false

          oneOf:
            - required: [file]
            - required: [path]

          properties:
            file:
              $ref: '#/components/schemas/File'

            path:
              $ref: '#/components/schemas/Path'

            destination:
              $ref: '#/components/schemas/Destination'
          <%- end -%>

        <%- end -%>
      <%- end -%>
  requestBodies:
    ViaFile:
      content:
        multipart/form-data:
          schema:
            oneOf:
              <%- dbs.each do |db| -%>
              - $ref: '#/components/schemas/<%= db[:id] %>ViaFile'
              <%- end -%>

    ViaDDBJRecord:
      content:
        multipart/form-data:
          schema:
            oneOf:
              <%- dbs.reject { it[:objects][:ddbj_record].empty? }.each do |db| -%>
              - $ref: '#/components/schemas/<%= db[:id] %>ViaDDBJRecord'
              <%- end -%>

  responses:
    BadRequest:
      description: Unexpected parameter specified.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Not authenticated.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Does not have access rights to the resource.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: The requested resource could not be found.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    UnprocessableContent:
      description: Invalid parameter or payload was specified.

      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
