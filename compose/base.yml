volumes:
  postgres:
  minio:
  virtuoso:

services:
  varnish:
    build: varnish
    user: root # https://github.com/varnish/docker-varnish/issues/53

    environment:
      VARNISH_HTTP_PORT: 8080

    ports:
      - ${VARNISH_PORT:?}:8080

    tmpfs:
      - /var/lib/varnish/varnishd:exec

    depends_on:
      rails:
        condition: service_started
      minio-setup:
        condition: service_completed_successfully

  rails: &rails
    build:
      context: ../
      dockerfile: api/Dockerfile

      args:
        API_URL:
        APP_GID:
        APP_UID:
        NODE_VERSION:
        RUBY_VERSION:

    init: true

    environment:
      API_URL:
      DATABASE_URL:            postgresql://postgres@postgres/ddbj_repository
      DDBJ_VALIDATOR_URL:      http://ddbj-validator:3000/api
      MINIO_ACCESS_KEY_ID:
      MINIO_BUCKET:            uploads
      MINIO_ENDPOINT:
      MINIO_SECRET_ACCESS_KEY:
      OIDC_CLIENT_ID:
      OIDC_ISSUER_URL:
      REPOSITORY_DIR:          /data/repository
      RUBY_YJIT_ENABLE:        'true'
      SECRET_KEY_BASE:
      SENTRY_CURRENT_ENV:
      SENTRY_DSN:
      SMTP_ADDRESS:
      SMTP_AUTHENTICATION:
      SMTP_DOMAIN:
      SMTP_PASSWORD:
      SMTP_PORT:
      SMTP_USERNAME:
      STAGE:
      TZ:                      Japan
      USER_HOME_DIR:           /data/home
      WEB_CONCURRENCY:         2

    depends_on:
      postgres:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
      ddbj-validator:
        condition: service_started

    extra_hosts:
      - host.docker.internal:host-gateway

  solid_queue:
    <<: *rails
    command: [bundle, exec, rake, solid_queue:start]
    ports: []

  postgres:
    image: postgres:16

    environment:
      POSTGRES_DB:               ddbj_repository
      POSTGRES_HOST_AUTH_METHOD: trust

    volumes:
      - postgres:/var/lib/postgresql/data

    healthcheck:
      test: [CMD, pg_isready, --username, postgres]
      interval: 1s
      timeout: 3s
      retries: 30

  minio:
    image: minio/minio:RELEASE.2023-12-07T04-16-00Z
    command: [server, /data, --console-address, ':9001']

    environment:
      MINIO_ROOT_PASSWORD:
      MINIO_ROOT_USER:

    volumes:
      - minio:/data

    healthcheck:
      test: [CMD, mc, ready, local]
      interval: 1s
      timeout: 3s
      retries: 30

  minio-setup:
    image: minio/mc:RELEASE.2023-02-28T00-12-59Z # https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-policy.html

    entrypoint:
      - bash
      - -xc
      - |
          set -e

          mc alias set minio http://minio:9000 $${MINIO_ROOT_USER:?} $${MINIO_ROOT_PASSWORD:?}
          mc mb --ignore-existing minio/uploads
          mc admin user add minio $${MINIO_ACCESS_KEY_ID:?} $${MINIO_SECRET_ACCESS_KEY:?}
          mc admin policy set minio readwrite user=$${MINIO_ACCESS_KEY_ID:?}

    environment:
      MINIO_ACCESS_KEY_ID:
      MINIO_ROOT_PASSWORD:
      MINIO_ROOT_USER:
      MINIO_SECRET_ACCESS_KEY:

    depends_on:
      minio:
        condition: service_healthy

  ddbj-validator:
    build:
      context: ../ddbj_validator

    environment:
      DDBJ_VALIDATOR_APP_POSTGRES_HOST:
      DDBJ_VALIDATOR_APP_POSTGRES_PASSWD:
      DDBJ_VALIDATOR_APP_POSTGRES_PORT:
      DDBJ_VALIDATOR_APP_POSTGRES_TIMEOUT:          '30'
      DDBJ_VALIDATOR_APP_POSTGRES_USER:
      DDBJ_VALIDATOR_APP_VIRTUOSO_ENDPOINT_MASTER:  http://virtuoso:8890/sparql
      TZ:                                           Japan

  virtuoso:
    image: openlink/virtuoso-opensource-7:7.2.6-r1-g0a3336c

    environment:
      DBA_PASSWORD: dba
      VIRT_Client_SQL_PREFETCH_BYTES: '160000'
      VIRT_Client_SQL_PREFETCH_ROWS: '10000'
      VIRT_Parameters_DirsAllowed: ., ../vad, /usr/share/proj, /database
      VIRT_Parameters_MaxDirtyBuffers: '130000'
      VIRT_Parameters_NumberOfBuffers: '170000'
      VIRT_SPARQL_MaxQueryCostEstimationTime: '-1'
      VIRT_SPARQL_MaxQueryExecutionTime: '300'
      VIRT_SPARQL_MaxSortedTopRows: '100000'
      VIRT_SPARQL_ResultSetMaxRows: '1000000'

    volumes:
      - virtuoso:/database
